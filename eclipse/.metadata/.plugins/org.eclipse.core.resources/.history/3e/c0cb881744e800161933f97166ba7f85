package com.snoopy_wwi_ace.isildurs_bane.control;

import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import net.minecraft.block.Block;
import net.minecraft.block.BlockSign;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.player.EntityPlayerMP;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.tileentity.TileEntitySign;
import net.minecraft.world.World;

public class TradeHandler {

	private static final String IDENTIFIER = "[trade]";
	private static final int NAME_INDEX = 3;
	private static final String LINE_FORMAT = "0 0 : 0";

	private SignControl handler = new SignControl();
	private PlayerInventoryControl invControl = new PlayerInventoryControl();

	public boolean isPlayersSign(EntityPlayerMP player, String[] sign) {
		return handler.isPlayersSign(player, sign);
	}

	public String[] newSign(EntityPlayerMP player, String[] sign) {
		if (handler.isTradeSign(sign)) {
			sign[NAME_INDEX] = player.getDisplayName();
			if (!handler.isCorrectTradeSign(sign)) {
				sign[1] = LINE_FORMAT;
				sign[2] = LINE_FORMAT;
			} else
				this.createNewSign(player, sign);
		}
		return sign;
	}

	public String[] clicked(EntityPlayerMP player, String[] sign, ItemStack stack, int x, int y, int z) {
		String[] result;
		if (!handler.isTradeSign(sign))
			return sign;
		if (!handler.isCorrectTradeSign(sign))
			return sign;
		else
			result = handler.isPlayersSign(player, sign) ? ownerInteraction(player, sign, stack)
					: buyerInteraction(player, sign, stack);
		handler.updateSign(player.worldObj, x, y, z, result);
		return result;
	}

	private String[] ownerInteraction(EntityPlayerMP player, String[] sign, ItemStack stack) {
		if (player.isSneaking())
			return handleIncome(player, sign, stack);
		else
			return handleSale(player, sign, stack);
	}

	private String[] buyerInteraction(EntityPlayerMP player, String[] sign, ItemStack stack) {
		if (player.isSneaking())
			return this.buyAll(player, sign);
		else
			return this.buy(player, sign);
	}

	// income
	private String[] handleIncome(EntityPlayerMP player, String[] sign, ItemStack stack) {
		if (player.getHeldItem() == null)
			return handler.isIncomeEmpty(sign) ? setCurrency(player, sign, stack) : collectIncome(player, sign, stack);
		else
			return collectIncome(player, sign, stack);
	}

	// sale
	private String[] handleSale(EntityPlayerMP player, String[] sign, ItemStack stack) {
		if (player.getHeldItem() == null)
			return handler.isIncomeEmpty(sign) ? setSale(player, sign, stack) : collectSale(player, sign, stack);
		else
			return collectSale(player, sign, stack);
	}

	private String[] addToSale(EntityPlayerMP player, String[] sign, ItemStack stack) {
		Item sale = handler.getSaleItem(sign);
		int quantity = handler.getSaleQuantity(sign);
		if (invControl.hasEnough(player, sale, quantity)) {
			invControl.consumeItems(player, sale, quantity);
			handler.setRemainingSale(sign, handler.getRemainingSale(sign) + quantity);
		}
		return sign;
	}

	private String[] createNewSign(EntityPlayerMP player, String[] sign) {
		handler.setRemainingSale(sign,
				invControl.consumeItems(player, handler.getSaleItem(sign), handler.getRemainingSale(sign)));
		handler.setStoredIncome(sign,
				invControl.consumeItems(player, handler.getCurrencyItem(sign), handler.getStoredIncome(sign)));
		return sign;
	}

	private String[] collectSale(EntityPlayerMP player, String[] sign, ItemStack stack) {
		invControl.addToInventory(player, handler.getSaleItem(sign), handler.getRemainingSale(sign));
		handler.setRemainingSale(sign, 0);
		return sign;
	}

	private String[] collectIncome(EntityPlayerMP player, String[] sign, ItemStack stack) {
		invControl.addToInventory(player, handler.getCurrencyItem(sign), handler.getStoredIncome(sign));
		handler.setStoredIncome(sign, 0);
		return sign;
	}

	private String[] setCurrency(EntityPlayerMP player, String[] sign, ItemStack stack) {
		if (handler.isIncomeEmpty(sign) && !stack.hasTagCompound()) {
			handler.setCurrencyID(sign, Item.getIdFromItem(stack.getItem()));
			handler.setIncomeQuantity(sign, stack.stackSize);
		} else
			this.collectIncome(player, sign, stack);
		return sign;
	}

	private String[] setSale(EntityPlayerMP player, String[] sign, ItemStack stack) {
		if (stack.hasTagCompound())
			return sign;
		Item sale = handler.getSaleItem(sign);
		int quantity = handler.getSaleQuantity(sign);
		if (!handler.isSaleEmpty(sign) && invControl.hasEnough(player, sale, quantity)) {
			invControl.consumeItems(player, sale, quantity);
			handler.setRemainingSale(sign, handler.getRemainingSale(sign) + quantity);
		} else {
			handler.setSaleID(sign, Item.getIdFromItem(stack.getItem()));
			handler.setSaleQuantity(sign, stack.stackSize);
			this.addToSale(player, sign, stack);
		}
		return sign;
	}

	private String[] buy(EntityPlayerMP player, String[] sign) {
		if (invControl.hasEnough(player, handler.getCurrencyItem(sign), handler.getIncomeQuantity(sign))
				&& handler.canBePurchased(sign)) {
			invControl.addToInventory(player, handler.getSaleItem(sign), handler.getSaleQuantity(sign));
			invControl.consumeItems(player, handler.getCurrencyItem(sign), handler.getIncomeQuantity(sign));
			handler.setRemainingSale(sign, handler.getRemainingSale(sign) - handler.getSaleQuantity(sign));
		}
		return sign;
	}

	private String[] buyAll(EntityPlayerMP player, String[] sign) {
		while (handler.canBePurchased(buy(player, sign))) {
		}
		return sign;
	}

	/**
	 * Gets the {@link BlockSign} at the specified coordinates.
	 * 
	 * @param world
	 *            {@link World} that is being checked for the {@link BlockSign}.
	 * @param x
	 *            The x coordinate to check.
	 * @param y
	 *            The y coordinate to check.
	 * @param z
	 *            The z coordinate to check.
	 * @return The {@link BlockSign}, or {@value null} if no {@link BlockSign}
	 *         is found.
	 */
	public BlockSign getSignAtLocation(World world, int x, int y, int z) {
		Block block = world.getBlock(x, y, z);
		if (block instanceof BlockSign)
			return (BlockSign) block;
		return null;
	}

	/**
	 * Returns the {@link TileEntitySign}'s text if there is a {@link BlockSign}
	 * at the specified location.
	 * 
	 * @param world
	 *            The {@link World} that the {@link TileEntitySign} is in.
	 * @param x
	 *            The X coordinate
	 * @param y
	 *            The Y coordinate
	 * @param z
	 *            The Z coordinate
	 * @return A String array containing the {@link TileEntitySign}'s text, or
	 *         {@value null} if no {@link TileEntitySign} is found.
	 */
	public String[] getSignText(World world, int x, int y, int z) {
		if (world.blockExists(x, y, z) && world.getTileEntity(x, y, z) instanceof TileEntitySign) {
			TileEntitySign sign = (TileEntitySign) world.getTileEntity(x, y, z);
			return sign.signText;
		}
		return null;
	}

	public void onBlockBreak(World world, String[] sign, int x, int y, int z) {
		ArrayList<ItemStack> saleStacks = invControl.breakIntoStacks(handler.getSaleItem(sign),
				handler.getRemainingSale(sign));
		ArrayList<ItemStack> profitStacks = invControl.breakIntoStacks(handler.getCurrencyItem(sign),
				handler.getStoredIncome(sign));
		for (ItemStack stack : saleStacks)
			world.spawnEntityInWorld(new EntityItem(world, x, y, z, stack));
		for (ItemStack stack : profitStacks)
			world.spawnEntityInWorld(new EntityItem(world, x, y, z, stack));
	}

}
