package com.snoopy_wwi_ace.isildurs_bane;

import com.snoopy_wwi_ace.isildurs_bane.channel_handler.IsildursBaneChannelHandler;
import com.snoopy_wwi_ace.isildurs_bane.channel_handler.IsildursBaneDigHandler;
import com.snoopy_wwi_ace.isildurs_bane.channel_handler.IsildursBanePlacementHandler;

import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import cpw.mods.fml.common.network.FMLNetworkEvent.ServerConnectionFromClientEvent;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.EntityPlayerMP;
import net.minecraft.item.ItemStack;
import net.minecraft.network.NetHandlerPlayServer;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.util.DamageSource;
import net.minecraft.util.MathHelper;
import net.minecraftforge.event.entity.living.LivingAttackEvent;
import net.minecraftforge.event.entity.player.AttackEntityEvent;

public class IsildursBaneHandler {

	private static final int HAND = 0;
	private static final int MODIFIER = 3;

	/*@SubscribeEvent
	public void onHitEvent(LivingAttackEvent event) {
		System.out.println("Got into the method");
		if (!event.isCanceled() && event.source.getSourceOfDamage() != null
				&& event.source.getSourceOfDamage() instanceof EntityLivingBase) {
			System.out.println("Event is not cancelled, damage is non_NULL, and the damage source is an entity.");
			EntityLivingBase attacker = (EntityLivingBase) event.source.getSourceOfDamage();
			ItemStack stack = attacker.getEquipmentInSlot(HAND);
			if (stack != null && stack.isItemEnchanted()) {
				System.out.println("The item is enchanted.");
				int knockbackModifier = EnchantmentHelper.getKnockbackModifier(attacker, event.entityLiving) * MODIFIER;
				double resistance = 1 - event.entityLiving
						.getEntityAttribute(SharedMonsterAttributes.knockbackResistance).getBaseValue();
				if (knockbackModifier < 0) {
					System.out.println("The knockback is less than zero.");
					event.entityLiving.motionY += 0.4;
					event.entityLiving.motionX += (double) (-MathHelper
							.sin(attacker.rotationYaw * (float) Math.PI / 180.0F) * (float) knockbackModifier * 0.5F)
							* resistance;
					event.entityLiving.motionZ += (double) (MathHelper
							.cos(attacker.rotationYaw * (float) Math.PI / 180.0F) * (float) knockbackModifier * 0.5F)
							* resistance;
					event.entityLiving.isAirBorne = true;
					event.entityLiving.velocityChanged = true;
					if (event.entityLiving instanceof EntityPlayer) {
						((EntityPlayerMP) event.entityLiving).playerNetServerHandler
								.sendPacket(new S12PacketEntityVelocity(event.entityLiving));

					}
				}
			}
		}
	}*/
	
	@SubscribeEvent
	public void onClientConnect(ServerConnectionFromClientEvent event) {
		EntityPlayerMP player = ((NetHandlerPlayServer)event.handler).playerEntity;
		event.manager.channel().pipeline().addFirst("IBInterceptor", new IsildursBaneChannelHandler(false)).addFirst(new IsildursBaneDigHandler(false)).addFirst(new IsildursBanePlacementHandler(false));
	}
}
